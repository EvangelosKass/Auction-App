{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","highestBidder","highestBid","accounts","contract","bidAmount","yourBid","statusMsg","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","Auction","networks","instance","Contract","abi","address","setState","getInfo","alert","error","methods","call","userBalances","setTimeout","bid","send","from","value","withdraw","message","bidChangeHandler","event","bidinput","Number","target","isNaN","this","className","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18d01447.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport Auction from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {highestBidder:null, highestBid: 0, web3: null, accounts: null, contract: null, bidAmount:0,yourBid:0, statusMsg:\"\" };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Auction.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Auction.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set state\n      this.setState({web3, accounts, contract: instance }, this.getInfo);\n      \n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  getInfo = async () => {\n    const contract = this.state.contract;\n\n    //get highestBidder\n    var highestBidder = await contract.methods.highestBidder().call();\n      \n    //get highestBid\n    var highestBid = await contract.methods.highestBid().call();\n    \n    //get users bid\n    var yourBid = await contract.methods.userBalances(this.state.accounts[0]).call();\n\n    // Update state with the result.\n    this.setState({ highestBidder,highestBid , yourBid });\n\n    \n    //auto refresh every 2 second\n    setTimeout(this.getInfo, 2000);\n  };\n  \n  bid = async ()=>{\n  \tconst {accounts, contract, bidAmount} = this.state;\n  \t\n  \tif(bidAmount <= 0){\n  \t\tthis.setState({statusMsg:\"Please enter a valid bid\"});\n  \t\treturn;\n  \t}\n  \t\n  \t\n  \ttry{\n  \t\tthis.setState({statusMsg:\"Placing bid please wait..\"});\n  \t\tlet response = await contract.methods.bid().send({from: accounts[0], value: bidAmount});\n  \t\tthis.setState({statusMsg:\"Bid placed successfully\"});\n  \t}catch(error){\n  \t\tthis.setState({statusMsg:\"Bid was not placed successfully\"});\n  \t\tconsole.error(error);\n  \t}\n  }\n  \n  withdraw = async ()=>{\n  \tconst {accounts, contract} = this.state;\n  \t\n  \ttry{\n  \t\tthis.setState({statusMsg:\"Withdraw in progress please wait..\"});\n  \t\tlet response = await contract.methods.withdraw().send({from: accounts[0]});\n  \t\tthis.setState({statusMsg:\"Withdraw was successfull\"});\n  \t}catch(error){\n  \t\tthis.setState({statusMsg:error.message});\n  \t\tconsole.error(error);\n  \t}\n  }\n  \n  bidChangeHandler = (event) => {\n  \tconst bidinput = Number(event.target.value);\n\n  \tif(!isNaN(bidinput)){\n  \t\tthis.setState({bidAmount:event.target.value, statusMsg:\"\"});\n  \t}else{\n  \t\tthis.setState({statusMsg:\"Please enter a valid bid\"});\n  \t}\n  \n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n      \n      \t<div className=\"info\">\n\t\t<h1>Auction</h1>\n\t\t<p><strong>Highest Bidder:</strong> {this.state.highestBidder}</p>\n\t\t<p><strong>Highest Bid:</strong> {this.state.highestBid} Wei</p>\n\t\t<p className={(this.state.accounts[0]==this.state.highestBidder)?\"green\":\"red\"}><strong>Your Bid:</strong> {this.state.yourBid}</p>\n        </div>\n        \n        <div className=\"controls\">\n        \t<div><strong>Make a Bid (in Wei): </strong><input onChange={this.bidChangeHandler}/> <button onClick={this.bid}>Bid</button></div>\n        \t<h3>or</h3>\n        \t<button onClick={this.withdraw}>Withdraw</button>\n        \t\n        </div>\n        \n        <div className=\"status\">\n        <h3>{this.state.statusMsg}</h3>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}